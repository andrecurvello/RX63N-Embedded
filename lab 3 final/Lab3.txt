/*******************************************************************************
Includes   <System Includes> , "Project Includes"
*******************************************************************************/
#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>
#include <machine.h>
#include "platform.h"
#include "r_switches.h"

/*******************************************************************************
DEFINES  <System Definitions> , "Defines the useful ports "
*******************************************************************************/
#define   led_on 0
#define   led_off 1
#define   SW1 PORT4.PIDR.BIT.B0
#define   SW2 PORT4.PIDR.BIT.B1
#define   SW3 PORT4.PIDR.BIT.B4
#define   ALL_LEDS_ON {LED4 = LED5 = LED6 = LED7 = LED8 = LED9 = LED10 = LED11 = LED12 = LED13 = LED14 = LED15 = led_on;}
#define   ALL_LEDS_OFF {LED4 = LED5 = LED6 = LED7 = LED8 = LED9 = LED10 = LED11 = LED12 = LED13 = LED14 = LED15 = led_off;}
#define POTENTIOMETER       PORT4.PODR.BIT.B2

/*******************************************************************************
* Prototypes for local functions
*******************************************************************************/
void delay(void); 
void delay2(void);
void disp(void);
uint32_t dly = 0;
uint16_t pote = 0;
uint8_t total = 0;
void S12AD_int (void);

void main(void)
{
    /* Initialize LCD */
    lcd_initialize(); 
    /* Clear LCD */
    lcd_clear();
    /* Display message on LCD */
    lcd_display(LCD_LINE1, "   Madison   ");
    lcd_display(LCD_LINE2, "    Azhar  ");


    /* 
        STDOUT is routed through the virtual console window tunneled through the JTAG debugger.
        Open the console window in HEW to see the output 
    */
    printf("This is the debug console\r\n");
    
    /* The three pushbuttons on the YRDK board are tied to interrupt lines, set them up here */
    R_SWITCHES_Init();
    
	S12AD_int();
    /* This is the main loop.  It does nothing but call the functions and make sure the LED starts in the off state */
	while (1)
	{
		  pote = S12AD.ADDR2 & 0x0FFF; // MASKING , 
		  pote *= (9/4095);
		  
		  total = dly + pote;
		  
			if(total == 0)
			{
				ALL_LEDS_OFF;
			}
		else
		{	
				delay();
      			delay2();
    
		}
	}
} /* End of function main() */

void S12AD_int (void)
{
	// MSTP(S12AD) = 0;

 SYSTEM.PRCR.WORD = 0xA50B;
 PORT4.PDR.BIT.B2  = 0;    /* Set I/O pin direction to input. */
 PORT4.PMR.BIT.B2  = 1;    /* First set I/O pin mode register to GPIO mode. */  
 SYSTEM.MSTPCRA.BIT.MSTPA17 = 0;

 S12AD.ADCSR.BYTE = 0x4C;  // for continuous scan mode and lowest conversion clock
 S12AD.ADANS0.WORD = 0x0004; /* Read AN002, which is connected to the potentiometer */
  MPC.P42PFS.BYTE = 0x80;   /* Set port function register to analog input, no interrupt. */
 S12AD.ADCER.WORD = 0x0020;   /* Right align data, automatic clearing off. and select formatting*/
 //S12AD.ADCSR.BYTE = 0x00;   
 //S12AD.ADCSR.BIT.TRGE = 1; // for the asynchronous triger
 //S12AD.ADCSR.BIT.EXTRG = 1; // for the asynchronous ex-triger
 S12AD.ADSTRGR.BYTE = 0x00;
 S12AD.ADCSR.BIT.ADST = 1; // start conv
 //S12AD.ADCSR.BIT.ADST = 0; // end conv
 
 SYSTEM.PRCR.WORD = 0xA500; 
}
    

    /* Power up the S12ADC */
   	
	
//Global Delay counter variable
int dly_ctr;

//delay increment
void delay(void) 
{ 
 for (dly_ctr = 0; dly_ctr < (50*total); dly_ctr++)
 {
	 ALL_LEDS_ON;			
 } 
} 

//delay deccrement
void delay2(void) 
{ 	
 for (dly_ctr = 0; dly_ctr < (50*(100-total)); dly_ctr++)
 {
	 	 ALL_LEDS_OFF;			
 }
} 


void disp(void)
{
	uint8_t  lcd_buffer[13];
	uint8_t  lcd_buffer1[13];
	uint8_t  lcd_buffer2[13];
	if (dly <= 100)
	{
		sprintf((char *)lcd_buffer, "B value= %3d", dly);
		sprintf((char *)lcd_buffer1, "P value= %3d", pote);
			sprintf((char *)lcd_buffer2, "T value= %3d", total);
		lcd_display(LCD_LINE3, lcd_buffer);
		lcd_display(LCD_LINE4, lcd_buffer1);
		lcd_display(LCD_LINE5, lcd_buffer2);
	}
	
}	


//*******************************************************************************/
uint16_t S12ADC_read (void)
{
    uint16_t adc_result;
    
    adc_result = S12AD.ADDR2;        /* Read the result register for AN2 */
    
    return adc_result;    
} /* End of function S12ADC_read() */


/******************************************************************************
* Function name: sw1_callback
* Description  : Callback function that is executed when SW1 is pressed.
*                Called by sw1_isr in r_switches.c
* Arguments    : none
* Return value : none
******************************************************************************/
void sw1_callback(void)
{
  dly = dly +10;
 	if(dly >=100)
	{
		dly = 100;
	}
	if(dly <=0)
	{
		dly = 0;
	}
  disp();
 
  /* Add your code here. Note: this is executing inside an ISR. */
} /* End of function sw1_callback() */


/******************************************************************************
* Function name: sw2_callback
* Description  : Callback function that is executed when SW2 is pressed.
*                Called by sw2_isr in r_switches.c
* Arguments    : none
* Return value : none
******************************************************************************/
void sw2_callback(void)
{
   	if(dly ==0)
	{
		dly = 0;
	}
	
	else 
	dly = dly - 10;
   

   disp();

} /* End of function sw2_callback() */


/******************************************************************************
* Function name: sw3_callback
* Description  : Callback function that is executed when SW3 is pressed.
*                Called by sw3_isr in r_switches.c
* Arguments    : none
* Return value : none
******************************************************************************/
void sw3_callback(void)
{
    nop(); /* Add your code here. Note: this is executing inside an ISR. */
} /* End of function sw3_callback() */

